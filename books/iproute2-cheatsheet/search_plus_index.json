{"SUMMARY.html":{"url":"SUMMARY.html","title":"Table of Contents","keywords":"","body":"\n    \n\n    Table of Contents\n    \n        \n            \n            \n    \n        \n            \n                \n                    \n                        Introduction\n                    \n                \n                \n                1.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        Overview\n                    \n                \n                \n                1.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        Address management\n                    \n                \n                \n                1.3\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Show all addresses\n                    \n                \n                \n                1.3.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. Show addresses for a single interface\n                    \n                \n                \n                1.3.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. Show addresses only for running interfaces\n                    \n                \n                \n                1.3.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. Show only static or dynamic IPv6 addresses\n                    \n                \n                \n                1.3.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. Add an address to an interface\n                    \n                \n                \n                1.3.5\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        6. Add an address with human-readable description\n                    \n                \n                \n                1.3.6\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        7. Delete an address\n                    \n                \n                \n                1.3.7\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        8. Remove all addresses from an interface\n                    \n                \n                \n                1.3.8\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        9. Notes\n                    \n                \n                \n                1.3.9\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Neighbor (ARP and NDP) table management\n                    \n                \n                \n                1.4\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. View neighbor tables\n                    \n                \n                \n                1.4.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. View neighbors for single interface\n                    \n                \n                \n                1.4.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. Flush table for an interface\n                    \n                \n                \n                1.4.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. Add a neighbor table entry\n                    \n                \n                \n                1.4.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. Delete a neighbor table entry\n                    \n                \n                \n                1.4.5\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Link management\n                    \n                \n                \n                1.5\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Show information about all links\n                    \n                \n                \n                1.5.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. Show information about specific link\n                    \n                \n                \n                1.5.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. Bring a link up or down\n                    \n                \n                \n                1.5.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. Set human-readable link description\n                    \n                \n                \n                1.5.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. Rename an interface\n                    \n                \n                \n                1.5.5\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        6. Change link layer address (usually MAC address)\n                    \n                \n                \n                1.5.6\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        7. Change link MTU\n                    \n                \n                \n                1.5.7\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        8. Delete a link\n                    \n                \n                \n                1.5.8\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        9. Enable or disable multicast on an interface\n                    \n                \n                \n                1.5.9\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        10. Enable or disable ARP on an interface\n                    \n                \n                \n                1.5.10\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        11. Create a VLAN interface\n                    \n                \n                \n                1.5.11\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        12. Create a QinQ interface (VLAN stacking)\n                    \n                \n                \n                1.5.12\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        13. Create pseudo-ethernet (aka macvlan) interface\n                    \n                \n                \n                1.5.13\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        14. Create a dummy interface\n                    \n                \n                \n                1.5.14\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        15. Create a bridge interface\n                    \n                \n                \n                1.5.15\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        16. Add an interface to bridge\n                    \n                \n                \n                1.5.16\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        17. Remove interface from bridge\n                    \n                \n                \n                1.5.17\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        18. Create a bonding interface\n                    \n                \n                \n                1.5.18\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        19. Create an intermediate functional block interface\n                    \n                \n                \n                1.5.19\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        20. Create a pair of virtual ethernet devices\n                    \n                \n                \n                1.5.20\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Link group management\n                    \n                \n                \n                1.6\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Add an interface to a group\n                    \n                \n                \n                1.6.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. Remove an interface from a group\n                    \n                \n                \n                1.6.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. Assign a symbolic name to a group\n                    \n                \n                \n                1.6.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. Perform an operation on a group\n                    \n                \n                \n                1.6.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. View information about links from specific group\n                    \n                \n                \n                1.6.5\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Tun and Tap devices\n                    \n                \n                \n                1.7\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. View tun/tap devices\n                    \n                \n                \n                1.7.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. Add an tun/tap device useable by the root user\n                    \n                \n                \n                1.7.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. Add an tun/tap device usable by an ordinary user\n                    \n                \n                \n                1.7.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. Add an tun/tap device using an alternate packet format\n                    \n                \n                \n                1.7.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. Add an tun/tap ignoring flow control\n                    \n                \n                \n                1.7.5\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        6. Delete tun/tap device\n                    \n                \n                \n                1.7.6\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Tunnel management\n                    \n                \n                \n                1.8\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Create an IPIP tunnel\n                    \n                \n                \n                1.8.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. Create a SIT tunnel\n                    \n                \n                \n                1.8.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. Create an IPIP6 tunnel\n                    \n                \n                \n                1.8.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. Create an IP6IP6 tunnel\n                    \n                \n                \n                1.8.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. Create a gretap (ethernet over GRE) device\n                    \n                \n                \n                1.8.5\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        6. Create a GRE tunnel\n                    \n                \n                \n                1.8.6\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        7. Create multiple GRE tunnels to the same endpoint\n                    \n                \n                \n                1.8.7\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        8. Create a point-to-multipoint GRE tunnel\n                    \n                \n                \n                1.8.8\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        9. Create a GRE tunnel over IPv6\n                    \n                \n                \n                1.8.9\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        10. Delete a tunnel\n                    \n                \n                \n                1.8.10\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        11. Modify a tunnel\n                    \n                \n                \n                1.8.11\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        12. View tunnel information\n                    \n                \n                \n                1.8.12\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        L2TPv3 pseudowire management\n                    \n                \n                \n                1.9\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Create an L2TPv3 tunnel over UDP\n                    \n                \n                \n                1.9.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. Create an L2TPv3 tunnel over IP\n                    \n                \n                \n                1.9.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. Create an L2TPv3 session\n                    \n                \n                \n                1.9.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. Delete an L2TPv3 session\n                    \n                \n                \n                1.9.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. Delete an L2TPv3 tunnel\n                    \n                \n                \n                1.9.5\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        6. View L2TPv3 tunnel information\n                    \n                \n                \n                1.9.6\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        7. View L2TPv3 session information\n                    \n                \n                \n                1.9.7\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        VXLAN management\n                    \n                \n                \n                1.10\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Create unicast VXLAN link\n                    \n                \n                \n                1.10.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. Create multicast VXLAN link\n                    \n                \n                \n                1.10.2\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Route management\n                    \n                \n                \n                1.11\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Connected routes\n                    \n                \n                \n                1.11.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. View all routes\n                    \n                \n                \n                1.11.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. View routes to a network and all its subnets\n                    \n                \n                \n                1.11.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. View routes to a network and all supernets\n                    \n                \n                \n                1.11.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. View routes to exact subnet\n                    \n                \n                \n                1.11.5\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        6. View only the route actually used by the kernel\n                    \n                \n                \n                1.11.6\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        7. View route cache (pre 3.6 kernels only)\n                    \n                \n                \n                1.11.7\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        8. Add a route via gateway\n                    \n                \n                \n                1.11.8\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        9. Add a route via interface\n                    \n                \n                \n                1.11.9\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        10. Change or replace a route\n                    \n                \n                \n                1.11.10\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        11. Delete a route\n                    \n                \n                \n                1.11.11\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        12. Default route\n                    \n                \n                \n                1.11.12\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        13. Blackhole routes\n                    \n                \n                \n                1.11.13\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        14. Other special routes\n                    \n                \n                \n                1.11.14\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        15. Routes with different metric\n                    \n                \n                \n                1.11.15\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        16. Multipath routing\n                    \n                \n                \n                1.11.16\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Policy-based routing\n                    \n                \n                \n                1.12\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Create a policy route\n                    \n                \n                \n                1.12.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. View policy routes\n                    \n                \n                \n                1.12.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. General rule syntax\n                    \n                \n                \n                1.12.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. Create a rule to match a source network\n                    \n                \n                \n                1.12.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. Create a rule to match a destination network\n                    \n                \n                \n                1.12.5\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        6. Create a rule to match a ToS field value\n                    \n                \n                \n                1.12.6\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        7. Create a rule to match a firewall mark value\n                    \n                \n                \n                1.12.7\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        8. Create a rule to match inbound interface\n                    \n                \n                \n                1.12.8\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        9. Create a rule to match outbound interface\n                    \n                \n                \n                1.12.9\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        10. Set rule priority\n                    \n                \n                \n                1.12.10\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        11. Show all rules\n                    \n                \n                \n                1.12.11\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        12. Delete a rule\n                    \n                \n                \n                1.12.12\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        13. Delete all rules\n                    \n                \n                \n                1.12.13\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Network namespace management\n                    \n                \n                \n                1.13\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Create a namespace\n                    \n                \n                \n                1.13.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. List existing namespaces\n                    \n                \n                \n                1.13.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. Delete a namespace\n                    \n                \n                \n                1.13.3\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        4. Run a process inside a namespace\n                    \n                \n                \n                1.13.4\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        5. List all processes assigned to a namespace\n                    \n                \n                \n                1.13.5\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        6. Identify process' primary namespace\n                    \n                \n                \n                1.13.6\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        7. Assign network interface to a namespace\n                    \n                \n                \n                1.13.7\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        8. Connect one namespace to another\n                    \n                \n                \n                1.13.8\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        9. Monitor network namespace subsystem events\n                    \n                \n                \n                1.13.9\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Multicast management\n                    \n                \n                \n                1.14\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. View multicast groups\n                    \n                \n                \n                1.14.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. Add a link-layer multicast address\n                    \n                \n                \n                1.14.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. View multicast routes\n                    \n                \n                \n                1.14.3\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        Network event monitoring\n                    \n                \n                \n                1.15\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. Monitor all events\n                    \n                \n                \n                1.15.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. Monitor specific events\n                    \n                \n                \n                1.15.2\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        3. Read a log file produced by rtmon\n                    \n                \n                \n                1.15.3\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n        \n            \n                \n                    \n                        netconf (sysctl configuration viewing)\n                    \n                \n                \n                1.16\n                \n            \n            \n            \n                \n    \n        \n            \n                \n                    \n                        1. View sysctl configuration for all interfaces\n                    \n                \n                \n                1.16.1\n                \n            \n            \n        \n    \n        \n            \n                \n                    \n                        2. View sysctl configuration for specific interface\n                    \n                \n                \n                1.16.2\n                \n            \n            \n        \n    \n\n            \n            \n        \n    \n\n\n            \n        \n\n        \n    \n\n\n\n\n        \n    \n\n\n\n"},"index.html":{"url":"index.html","title":"Introduction","keywords":"","body":"\n    \n        Introduction\n        \n            iproute2 cheatsheet\nThe ip command from Linux iproute2 package replaced the old ifconfig, vconfig etc. commands,\nhowever, its man pages don't really explain how to use it, and there was no definitive guide that\nwould cover all or at least most of its functions.\nThis oversized cheatsheet aims to become such a guide. To help people start using it, it doesn't\nlist features of iproute2, but rather lists common network administration tasks and explains how to\nperform them with iproute2.\nPrimary location and mirroring\nThe original and primary location of the document is http://baturin.org/docs/iproute2/\nThe page is bundled with all the JS and CSS it needs, so it's easy to mirror.\nIf you decide to mirror it, please make sure to update it automatically from git to avoid\ncreating outdated copies.\nContributing\nPatches are always welcome. If you want to fix a typo, improve grammar or wording,\nor document a previously undocumented feature, please open a pull request or email me\na patch (use git format-patch please).\niproute2 cheatsheet itself and all contributions are licensed under CC-BY-SA.\n\n        \n    \n\n\n        \n    \n\n\n\n"},"iproute2-cheatsheet.html":{"url":"iproute2-cheatsheet.html","title":"Overview","keywords":"","body":"\n    \n        Overview\n        \n            Overview\niproute2 is the Linux networking toolkit that replaced net-tools (ifconfig, route, arp etc.)\nOld style network utilities like ifconfig and route are still there just for backwards compatibility and do not provide access to new features like policy-based routing or network namespaces.\nNote that iproute2 has been a standard Linux tool since the early 2000's. It's included in every distro by default, or at least available from the repos (OpenWRT is one of the cases).\niproute2 was originally written by Alex Kuznetsov and is now maintained by Stephen Hemminger.\nThis document aims to provide comprehensive but easy to use documentation for the ip command included in iproute2 package. There are more, such as ss (netstat replacement, fairly straightforward), tc (QoS management), but documenting them in this style, especially tc, would be a separate big project.\nInstead of listing commands and describing what they do, it uses a task-centered approach and gives commands for tasks that network administrators need to do. It was once called a “cheatsheet” for this reason, but has long outgrown the size and scope of a cheat sheet for the most common tasks.\nContributions are always welcome, you can find the “source code” at github.com/dmbaturin/iproute2-cheatsheet.\ngit clone https://github.com/dmbaturin/iproute2-cheatsheet.git\nThis document is provided “as is”, without any warranty. The authors are not liable for any damage related to using it.\nGeneral notes\nAll commands that change any settings (that is, not just display them) require root privileges.\nThere are configuration files in /etc/iproute2, mainly for assinging symbolic names to network stack entities such as routing tables. Those files are re-read every time you run the ip command and you don't need to do anything to apply the changes.\nTypographic conventions\nMetasyntactic variables are written in shell-style syntax, ${something}. Optional command parts are in square brackets.\nTable of contents\nAddress management\n\nIn this section ${address} value should be a host address in dotted decimal format, and ${mask} can be either a dotted decimal subnet mask or a prefix length. That is, both 192.0.2.10/24 and 192.0.2.10/255.255.255.0 are equally acceptable.\nIf you are not sure if something is a correct host address, use ipcalc or similar program to check.\nShow all addresses\nip address show\nAll show commands can be used with -4 or -6 options to show only IPv4 or IPv6 addresses.\nShow addresses for a single interface\nip address show ${interface name}\nExamples:\nip address show eth0\nShow addresses only for running interfaces\nip address show up\nShow only static or dynamic IPv6 addresses\nShow only statically configured addresses:\nip address show [dev ${interface}] permanent\nShow only addresses learnt via autoconfiguration:\nip address show [dev ${interface}] dynamic\nAdd an address to an interface\nip address add ${address}/${mask} dev ${interface name}\nExamples:\nip address add 192.0.2.10/27 dev eth0\n\nip address add 2001:db8:1::/48 dev tun10\nYou can add as many addresses as you want.\nIf you add more than one address, your machine will accept packets for all of them. The first address you added will be used as source address for outgoing traffic by default, it's referred to as primary address.\nAll additional addresses you set will become secondary addresses.\nAdd an address with human-readable description\nip address add ${address}/${mask} dev ${interface name} label ${interface name}:${description}\nExamples:\nip address add 192.0.2.1/24 dev eth0 label eth0:WANaddress\nA label must start with the interface name followed by a colon due to some backwards compatibility issues, otherwise you'll get an error. Keep the label shorter than sixteen characters, or else you'll get this error:\nRTNETLINK answers: Numerical result out of range\nNotes\nFor IPv6 addresses this command has no effect (address will be added, but without a label).\nDelete an address\nip address delete ${address}/${prefix} dev ${interface name}\nExamples:\nip address delete 192.0.2.1/24 dev eth0\n\nip address delete 2001:db8::1/64 dev tun1\nInterface name is required. Linux does allow the same address to be configured on multiple interfaces and it has valid use cases.\nRemove all addresses from an interface\nip address flush dev ${interface name}\nExamples:\nip address flush dev eth1\nBy default this command removes both IPv4 and IPv6 addresses. If you want to remove only IPv4 or IPv6 addresses, use “ip -4 address flush” or “ip -6 address flush”.\nNotes\nThere is no way to swap primary and secondary addresses or explicitly set the new primary address. Try to always set the primary address first.\nHowever, if the sysctl variable net.ipv4.conf.${interface}.promote_secondaries is set to 1, when you delete the primary address, the first secondary address will become the new primary.\nNote that net.ipv4.conf.default.promotesecondaries=1 is _not the universal default setting in all Linux distributions, so check yours before trying it. If it's set to 0, then when you delete the primary address, all addresses will be removed from the interface.\nSecondary IPv6 addresses are always promoted to primary if the primary address is deleted so you don't need to worry about sysctl settings.\nNeighbor (ARP and NDP) table management\n\nFor ladies and gentlemen who prefer the British spelling, this command family supports the \"neighbour\" spelling too.\nView neighbor tables\nip neighbor show\nAll \"show\" commands support -4 and -6 options to view only IPv4 (ARP) or IPv6 (NDP) neighbors. By default all neighbors are displayed.\nView neighbors for single interface\nip neighbor show dev ${interface name}\nExamples:\nip neighbor show dev eth0\nFlush table for an interface\nip neighbor flush dev ${interface name}\nExamples:\nip neighbor flush dev eth1\nAdd a neighbor table entry\nip neighbor add ${network address} lladdr ${link layer address} dev ${interface name}\nExamples:\nip neighbor add 192.0.2.1 lladdr 22:ce:e0:99:63:6f dev eth0\nOne of the use cases for it is to add static entry for an interface with disabled ARP to restrict interface usage only by hosts with specific MAC addresses.\nDelete a neighbor table entry\nip neighbor delete ${network address} lladdr ${link layer address} dev ${interface name}\nExamples:\nip neighbor delete 192.0.2.1 lladdr 22:ce:e0:99:63:6f dev eth0\nAllows to delete a static entry, or get rid of an automatically learnt entry without flushing the table.\nLink management\n\nLink is another term for a for network interface. Commands from the \"ip link\" family perform operations that are common for all interface types, like viewing link information or changing the MTU.\nHistorically \"ip link\" commands could create all types of interfaces, except for tunnels (IPIP, GRE etc.), L2TPv3, and VXLAN interfaces that have their own commands. In newer iproute2 versions (since at least 3.16) they can create interfaces of all types except L2TPv3, though using special command families for some of them is more convenient.\nNote that interface name you set with \"name ${name}\" parameter of \"ip link add\" and \"ip link set\" commands may be arbitrary, and may even contain unicode characters. However, it's better to stick with ASCII because other programs may not handle unicode correctly.\nAlso note that other programs, such as iptables, may have their own link name format and length restrictions, so it's better to use short alphanumeric names, and provide additional information in link aliases.\nShow information about all links\nip link show\n\nip link list\nThese commands are equivalent and can be used with the same arguments.\nShow information about specific link\nip link show dev ${interface name}\nExamples:\nip link show dev eth0\n\nip link show dev tun10\nThe word \"dev\" may be omitted.\nBring a link up or down\nip link set dev ${interface name} up\n\nip link set dev ${interface name} down\nExamples:\nip link set dev eth0 down\n\nip link set dev br0 up\nNote: virtual links described below, like VLANs and bridges are in down state immediately after creation. You need to bring them up to start using them.\nSet human-readable link description\nip link set dev ${interface name} alias \"${description}\"\nExamples:\nip link set dev eth0 alias \"LAN interface\"\nLink aliases show up in \"ip link show\" output, like:\n2: eth0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP mode DEFAULT qlen 1000\n    link/ether 22:ce:e0:99:63:6f brd ff:ff:ff:ff:ff:ff\n    alias LAN interface\nRename an interface\nip link set dev ${old interface name} name ${new interface name}\nExamples:\nip link set dev eth0 name lan\nNote that you can't rename an active interface. You need to bring it down before doing it.\nChange link layer address (usually MAC address)\nip link set dev ${interface name} address ${address}\nLink layer address is a pretty broad concept. The most known example is MAC address for ethernet devices. To change MAC address you would need something like:\nip link set dev eth0 address 22:ce:e0:99:63:6f\nChange link MTU\nip link set dev ${interface name} mtu ${MTU value}\nExamples:\nip link set dev tun0 mtu 1480\nMTU stands for \"Maximum Transmission Unit\", the maximum size of a frame an interface can transmit at once.\nApart from reducing fragmentation in tunnels like in example above, this is also used to increase performance of gigabit ethernet links that support so called \"jumbo frames\" (frames up to 9000 bytes large). If all your equipment supports gigabit ethernet, you may want to do something like\nip link set dev eth0 mtu 9000\nNote that you may need to configure it on your L2 switches too, some of them have it disabled by default.\nDelete a link\nip link delete dev ${interface name}\nObviously, only virtual links like VLANs or bridges can be deleted.\nEnable or disable multicast on an interface\nip link set ${interface name} multicast on\n\nip link set ${interface name} multicast off\nUnless you really understand what you are doing, better not to touch this.\nEnable or disable ARP on an interface\nip link set ${interface name} arp on\n\nip link set ${interface name} arp off\nOne may want to disable ARP to enforce a security policy and allow only specific MACs to communicate with the interface. In this case neighbor table entries for whitelisted MACs should be created manually (see neighbor table management table management) section), or nothing will be able to communicate with that interface.\nIn most cases it's better to configure MAC policy on an access layer switch though. Do not change this flag unless you are sure what you are going to do and why.\nCreate a VLAN interface\nip link add name ${VLAN interface name} link ${parent interface name} type vlan id ${tag}\nExamples:\nip link add name eth0.110 link eth0 type vlan id 110\nThe only type of VLAN supported in Linux is IEEE 802.1q VLAN, legacy implementations like ISL are not supported.\nOnce you create a VLAN interface, all frames tagged with ${tag} you specified in id option received by ${parent interface} will be processed by that VLAN interface.\neth0.100 name format is traditional, but not required, you can name the interface as you want, just like with other interface types.\nVLANs can be created over bridge, bonding and other interfaces capable of processing ethernet frames too.\nCreate a QinQ interface (VLAN stacking)\nip link add name ${service interface} link ${physical interface} type vlan proto 802.1ad id ${service tag}\nip link add name ${client interface} link ${service interface} type vlan proto 802.1q id ${client tag}\nExample:\nip link add name eth0.100 link eth0 type vlan proto 802.1ad id 100 # Create service tag interface\n\nip link add name eth0.100.200 link eth0.100 type vlan proto 802.1q id 200 # Create client tag interface\nVLAN stacking (aka 802.1ad QinQ) is a way to transmit VLAN tagged traffic over another VLAN. The common use case for it is like this: suppose you are a service provider and you have a customer who wants to use your network infrastructure to connect parts of their network to each other. They use multiple VLANs in their network, so an ordinary rented VLAN is not an option. With QinQ you can add a second tag to the customer traffic when it enters your network and remove that tag when it exits, so there are no conflicts and you don't need to waste VLAN numbers.\nThe service tag is the VLAN tag the provider uses to carry client traffic through their network. The client tag is the tag set by the customer.\nNote that link MTU for the client VLAN interface is not adjusted automatically, you need to take care of it yourself and either decrease the client interface MTU by at least 4 bytes, or increase the parent MTU accordingly.\nStandards-compliant QinQ is available since Linux 3.10.\nCreate pseudo-ethernet (aka macvlan) interface\nip link add name ${macvlan interface name} link ${parent interface} type macvlan\nExamples:\nip link add name peth0 link eth0 type macvlan\nYou can think of macvlan interfaces as additional virtual MAC addresses on the parent interface. They look like normal ethernet interfaces from user point of view, and handle all traffic for MAC address they are assigned with received by their parent interface.\nThis is commonly used for testing, or for using several instances of a service identified by MAC when only one physical interface is available.\nThey also can be used just for IP address separation instead of assigning multiple addresses to the same physical interface, especially if some service can't operate on a secondary address properly.\nCreate a dummy interface\nip link add name ${dummy interface name} type dummy\nExamples:\nip link add name dummy0 type dummy\nDummy interfaces work pretty much like loopback interfaces, just there can be as many of them as you want.\nThe first purpose of them is for communication of programs inside the host.\nThe second purpose exploits the fact they are always up (unless administratively taken down). This is often used to assign service addresses to them on routers with more than one physical interface. As long as the traffic to the address assigned to a loopback or dummy interface is routed to the machine that owns it, you can access it through any of its interfaces.\nCreate a bridge interface\nip link add name ${bridge name} type bridge\nExamples:\nip link add name br0 type bridge\nBridge interfaces are virtual ethernet switches. They can be used to relay traffic transparently between ethernet interfaces, and, increasingly common, as ethernet switches for virtual machines running inside hypervisors.\nYou can assign an IP address to a bridge and it will be visible from all bridge ports.\nIf this command fails, check if \"bridge\" module is loaded.\nAdd an interface to bridge\nip link set dev ${interface name} master ${bridge name}\nExamples:\nip link set dev eth0 master br0\nInterface you added to a bridge becomes a virtual switch port. It operates only on datalink layer and ceases all network layer operation.\nRemove interface from bridge\nip link set dev ${interface name} nomaster\nExamples:\nip link set dev eth0 nomaster\nCreate a bonding interface\nip link add name ${name} type bond\nExamples:\nip link add name bond1 type bond\nNote: This is not enough to configure bonding (link aggregation) in any meaningful way. You need to set up bonding parameters according to your situation. This is far beyond the cheat sheet scope, so consult the documentation.\nInterfaces are added to the bond group the same way to bridge group, just note that you can't add it until you take it down.\nCreate an intermediate functional block interface\nip link add ${interface name} type ifb\nExample:\nip link add ifb10 type ifb\nIntermediate functional block devices are used for traffic redirection and mirroring in conjunction with tc. This is also far beyond the scope of this document, consult tc documentation.\nCreate a pair of virtual ethernet devices\nVirtual ethernet (veth) devices always come in pairs and work as a bidirectional pipe, whatever comes into one of them, comes out of another. They are used in conjunction with system partitioning features such as network namespaces and containers (OpenVZ and LXC) for connecting one partition to another.\nip link add name ${first device name} type veth peer name ${second device name}\nExamples:\nip link add name veth-host type veth peer name veth-guest\nNote: virtual ethernet devices are created in UP state, no need to bring them up manually after creation.\nLink group management\n\nLink groups are similar to port ranges found in managed switches. You can add network interfaces to a numbered group and perform operations on all the interfaces from that group at once.\nLinks not assigned to any group belong to group 0 aka \"default\".\nAdd an interface to a group\nip link set dev ${interface name} group ${group number}\nExamples:\nip link set dev eth0 group 42\n\nip link set dev eth1 group 42\nRemove an interface from a group\nThis can be done by assigning it to the default group.\nip link set dev ${interface name} group 0\n\nip link set dev ${interface} group default\nExamples:\nip link set dev tun10 group 0\nAssign a symbolic name to a group\nGroup names are stored in /etc/iproute2/group file. Symbolic name \"default\" for group 0 comes exactly from there. You can add your own, one per line, following the same \"${number} ${name}\" format. You can have up to 255 named groups.\nOnce you configured a group name, number and name can be used interchangeably in ip commands.\nExample:\necho \"10 customer-vlans\" \u003e\u003e /etc/iproute2/group\nAfter that you can use that name in all operations, like in\nip link set dev eth0.100 group customer-vlans\nPerform an operation on a group\nip link set group ${group number} ${operation and arguments}\nExamples:\nip link set group 42 down\n\nip link set group uplinks mtu 1200\nView information about links from specific group\nUse usual information viewing command with \"group ${group}\" modifier.\nExamples:\nip link list group 42\n\nip address show group customers\nTun and Tap devices\n\nTun and tap devices allow userspace programs to emulate a network device. When the userspace program opens them they get a file descriptor. Packets routed by the kernel networking stack to the device are read from the file descriptor, data the userspace program writes to the file descriptor are injected as local outgoing packets into the networking stack. The difference between the two is:\n\ntap sends and receives raw Ethernet frames.\ntun sends and receives raw IP packets.\n\nThere are two types of tun/tap devices: persistent and transient. Transient tun/tap devices are created by userspace programs when they open a special device, and are destroyed automatically when the associated file descriptor is closed. The commands listed here manipulate persistent devices.\nView tun/tap devices\nip tuntap show\nNote: this command can be abbreviated to \"ip tuntap\".\nThis command is the only way to find out if some device is in tun or tap mode.\nAdd an tun/tap device useable by the root user\nip tuntap add dev ${interface name} mode ${mode}\nExamples:\nip tuntap add dev tun0 mode tun\n\nip tuntap add dev tap9 mode tap\nAdd an tun/tap device usable by an ordinary user\nip tuntap add dev ${interface name} mode ${mode} user ${user} group ${group}\nExample:\nip tuntap add dev tun1 mode tun user me group mygroup\n\nip tuntap add dev tun2 mode tun user 1000 group 1001\nAdd an tun/tap device using an alternate packet format\nAdd meta information to each packet received over the file descriptor. Very few programs expect this information, and including it when it isn't expected will break things.\nip tuntap add dev ${interface name} mode ${mode} pi\nExample:\nip tuntap add dev tun1 mode tun pi\nAdd an tun/tap ignoring flow control\nNormally packets sent to a tun/tap device travel in the same way as packets sent to any other device: they are put on a queue handled by the traffic control engine (which is configured by the tc command). This can be bypassed, thus disabling the traffic control engine for this tun/tap device.\nip tuntap add dev ${interface name} mode ${mode} one_queue\nExample:\nip tuntap add dev tun1 mode tun one_queue\nDelete tun/tap device\nip tuntap del dev ${interface name} mode ${mode}\nExamples:\nip tuntap delete dev tun0 mode tun\n\nip tuntap delete dev tap1 mode tap\nNote: you must specify the mode. The mode is not displayed in \"ip link show\", so if you don't know if it's TUN or TAP, consult the output of \"ip tuntap show\".\nTunnel management\n\nTunnels are \"network wormholes\" that look like normal interfaces, but packets sent through them are encapsulated into another protocol and sent to the other side of tunnel through multiple hosts, then decapsulated and processed in usual way, so you can pretend two machines have direct connectivity, while they in fact do not.\nThis is often used for virtual private networks (in conjunction with encrypted transport protocols like IPsec), or connecting networks that use some protocol via an intermediate network that does not use it (e.g. IPv6 networks separated by an IPv4-only segment).\nNote: tunnels on their own offer zero security. They are as secure as their underlying network. So if you need security, use them over an encrypted transport, e.g. IPsec.\nLinux currently supports IPIP (IPv4 in IPv4), SIT (IPv6 in IPv4), IP6IP6 (IPv6 in IPv6), IPIP6 (IPv4 in IPv6), GRE (virtually anything in anything), and, in very recent versions, VTI (IPv4 in IPsec).\nNote that tunnels are created in DOWN state, you need to bring them up.\nIn this section ${local endpoint address} and ${remote endpoint address} refer to addresses assigned to physical interfaces of endpoint. ${address} refers to the address assigned to tunnel interface.\nCreate an IPIP tunnel\nip tunnel add ${interface name} mode ipip local ${local endpoint address} remote ${remote endpoint address}\nExamples:\nip tunnel add tun0 mode ipip local 192.0.2.1 remote 198.51.100.3\n\nip link set dev tun0 up\n\nip address add 10.0.0.1/30 dev tun0\nCreate a SIT tunnel\nip tunnel add ${interface name} mode sit local ${local endpoint address} remote ${remote endpoint address}\nExamples:\nip tunnel add tun9 mode sit local 192.0.2.1 remote 198.51.100.3\n\nip link set dev tun9 up\n\nip address add 2001:db8:1::1/64 dev tun9\nThis type of tunnels is commonly used to provide an IPv4-connected network with IPv6 connectivity. There are so called \"tunnel brokers\" that provide it to everyone interested, e.g. Hurricane Electric tunnelbroker.net.\nCreate an IPIP6 tunnel\nip -6 tunnel add ${interface name} mode ipip6 local ${local endpoint address} remote ${remote endpoint address}\nExamples:\nip -6 tunnel add tun8 mode ipip6 local 2001:db8:1::1 remote 2001:db8:1::2\nThis type of tunnels will be widely used when transit operators phase IPv4 out (i.e. not any soon).\nCreate an IP6IP6 tunnel\nip -6 tunnel add ${interface name} mode ip6ip6 local ${local endpoint address} remote ${remote endpoint address}\nExamples:\nip -6 tunnel add tun3 mode ip6ip6 local 2001:db8:1::1 remote 2001:db8:1::2\n\nip link set dev tun3 up\n\nip address add 2001:db8:2:2::1/64 dev tun3\nJust like IPIP6 these ones aren't going to be generally useful any soon.\nCreate a gretap (ethernet over GRE) device\nip link add ${interface name} type gretap local ${local endpoint address} remote ${remote endpoint address}\nExamples:\nip link add gretap0 type gretap local 192.0.2.1 remote 203.0.113.3\nThis type of tunnels encapsulates ethernet frames into IPv4 packets.\nRecent kernel and iproute2 versions also support gretap over IPv6, you need to replace the mode with \"ip6gretap\" to create an IPv6-based link.\nThis probably should have been in \"Links management\" section, but as it involves encapsulation, it's here. Tunnel interface created this way looks like an L2 link, and it can be added to a bridge group. This is used to connect L2 segments via a routed network.\nCreate a GRE tunnel\nip tunnel add ${interface name} mode gre local ${local endpoint address} remote ${remote endpoint address}\nExamples:\nip tunnel add tun6 mode gre local 192.0.2.1 remote 203.0.113.3\n\nip link set dev tun6 up\n\nip address add 192.168.0.1/30 dev tun6\n\nip address add 2001:db8:1::1/64 dev tun6\nGRE can encapsulate both IPv4 and IPv6 at the same time. However, by default it uses IPv4 for transport, for GRE over IPv6 there is a separate tunnel mode, \"ip6gre\".\nCreate multiple GRE tunnels to the same endpoint\nip tunnel add ${interface name} mode gre local ${local endpoint address} remote ${remote endpoint address} key ${key value}\nExamples:\nip tunnel add tun4 mode gre local 192.0.2.1 remote 203.0.113.6 key 123\n\nip tunnel add tun5 mode gre local 192.0.2.1 remote 203.0.113.6 key 124\nKeyed tunnels can be used at the same time to unkeyed too. Key may be in dotted decimal IPv4-like format.\nNote that key does not add any security to the tunnel. It's just an identifier used to distinguish one tunnel from another.\nCreate a point-to-multipoint GRE tunnel\nip tunnel add ${interface name} mode gre local ${local endpoint address} key ${key value}\nExamples:\nip tunnel add tun8 mode gre local 192.0.2.1 key 1234\n\nip link set dev tun8 up\n\nip address add 10.0.0.1/27 dev tun8\nNote the absence of ${remote endpoint address}. This is the same to what is called \"mode gre multipoint\" in Cisco IOS.\nIn the absence of remote endpoint address the key is the only way to identify the tunnel traffic, so ${key value} is required.\nThis type of tunnels allows you to communicate with multiple endpoints by using the same tunnel interface. It's commonly used in complex VPN setups with multiple endpoints communicating to one another (in Cisco terminology, \"dynamic multipoint VPN\").\nAs there is no explicit remote endpoint address, obviously it is not enough to just create a tunnel. Your system needs to know where the other endpoints are.\nIn real life NHRP (Next Hop Resolution Protocol) is used for it. For testing you can add peers manually (given remote endpoint uses 203.0.113.6 address on its physical interface and 10.0.0.2 on the tunnel):\nip neighbor add 10.0.0.2 lladdr 203.0.113.6 dev tun8\nYou will have to do it on the remote endpoint too, like:\nip neighbor add 10.0.0.1 lladdr 192.0.2.1 dev tun8\nNote that link-layer address and neighbor address are both IP addresses, so they are on the same OSI layer. This one of the cases where link-layer address concept gets interesting.\nCreate a GRE tunnel over IPv6\nRecent kernel and iproute2 versions support GRE over IPv6. Point-to-point with no key:\nip -6 tunnel add name ${interface name} mode ip6gre local ${local endpoint} remote ${remote endpoint}\nIt should support all options and features supported by the IPv4 GRE described above.\nDelete a tunnel\nip tunnel del ${interface name}\nExamples:\nip tunnel del gre1\nNote that in older iproute2 versions this command did not support the full \"delete\" word, only \"del\". Recent versions allow both full and abbreviated forms (tested in iproute2-ss131122).\nModify a tunnel\nip tunnel change ${interface name} ${options}\nExamples:\nip tunnel change tun0 remote 203.0.113.89\n\nip tunnel change tun10 key 23456\nNote: Apparently you can't add a key to previously unkeyed tunnel. Not sure if it's a bug or a feature. Also, you can't change tunnel mode on the fly, for obvious reasons.\nView tunnel information\nip tunnel show\n\nip tunnel show ${interface name}\nExamples:\nip tun show tun99 \ntun99: gre/ip  remote 10.46.1.20  local 10.91.19.110  ttl inherit\nL2TPv3 pseudowire management\n\nL2TPv3 is a tunneling protocol commonly used for L2 pseudowires.\nIn many distros L2TPv3 is compiled as a module, and may not be loaded by default. If you get a \"RTNETLINK answers: No such file or directory\" and \"Error talking to the kernel\" message to any \"ip l2tp\" command, this is likely the case. Load l2tp_netlink and l2tp_eth modules. If you want to use L2TPv3 over IP rather than UDP, also load l2tp_ip.\nCompared to other tunneling protocol implementations in Linux, L2TPv3 terminology is somewhat reversed. You create a tunnel, and then bind sessions to it. You can bind multiple sessions with different identifiers to the same tunnel. Virtual network interfaces (by default named l2tpethX) are associated with sessions.\nNote: Linux kernel implements only handling of data frames, so you can create only unmanaged tunnels with iproute2, with all settings configured manually on both sides. If you want to use L2TP for remote access VPN or something else other than fixed pseudowire, you need a userspace daemon to handle it. This is outside of this document scope.\nCreate an L2TPv3 tunnel over UDP\nip l2tp add tunnel \\\ntunnel_id ${local tunnel numeric identifier} \\\npeer_tunnel_id ${remote tunnel numeric identifier} \\\nudp_sport ${source port} \\\nudp_dport ${destination port} \\\nencap udp \\\nlocal ${local endpoint address} \\\nremote ${remote endpoint address}\nExamples:\nip l2tp add tunnel \\\ntunnel_id 1 \\\npeer_tunnel_id 1 \\\nudp_sport 5000 \\\nudp_dport 5000 \\ \nencap udp \\\nlocal 192.0.2.1 \\ \nremote 203.0.113.2\nNote: Tunnel identifiers and other settings on both endpoints must match.\nCreate an L2TPv3 tunnel over IP\nip l2tp add tunnel \\\ntunnel_id ${local tunnel numeric identifier} \\\npeer_tunnel_id {remote tunnel numeric identifier } \\\nencap ip \\\nlocal 192.0.2.1 \\\nremote 203.0.113.2\nL2TPv3 encapsulated directly into IP offers less overhead, bug generally is unable to pass through NAT.\nCreate an L2TPv3 session\nip l2tp add session tunnel_id ${local tunnel identifier} \\\nsession_id ${local session numeric identifier} \\\npeer_session_id ${remote session numeric identifier}\nExamples:\nip l2tp add session tunnel_id 1 \\ \nsession_id 10 \\\npeer_session_id 10\nNotes: tunnel_id value must match a value of previously created tunnel. Session identifiers on both endpoints must match.\nOnce you create a tunnel and a session, l2tpethX interface will appear, in down state. Change the state to up and bridge it with another interface or assign an address.\nDelete an L2TPv3 session\nip l2tp del session tunnel_id ${tunnel identifier} \\\nsession_id ${session identifier}\nExamples\nip l2tp del session tunnel_id 1 session_id 1\nDelete an L2TPv3 tunnel\nip l2tp del tunnel tunnel_id ${tunnel identifier}\nExamples\nip l2tp del tunnel tunnel_id 1\nNote: You need to delete all sessions associated with a tunnel before deleting it.\nView L2TPv3 tunnel information\nip l2tp show tunnel\n\nip l2tp show tunnel tunnel_id ${tunnel identifier}\nExamples:\nip l2tp show tunnel tunnel_id 12\nView L2TPv3 session information\nip l2tp show session\n\nip l2tp show session session_id ${session identifier} \\\ntunnel_id ${tunnel identifier}\nExamples:\nip l2tp show session session_id 1 tunnel_id 12\nVXLAN management\n\nVXLAN is a layer 2 tunneling protocol that is commonly used in conjunction with virtualization systems such as KVM to connect virtual machines running on different hypervisor nodes to each other and to outside world.\nUnlike GRE or L2TPv3 that are point to point, VXLAN replicates some properties of multiple access switched networks by using IP multicast. Also it supports virtual network separation by transmitting a network identifier along with the frame.\nThe downside is that you will need to use a multicast routing protocol, typically PIM-SM, to get it to work over routed networks.\nThe underlying encapsulation protocol for VXLAN is UDP.\nCreate unicast VXLAN link\nip link add name ${interface name} type vxlan \\ \n   id \u003c0-16777215\u003e \\\n   dev ${source interface} \\\n   remote ${remote endpoint address} \\\n   local ${local endpoint address} \\\n   dstport ${VXLAN destination port}\nExample:\nip link add name vxlan0 type vxlan \\\n   id 42 dev eth0 remote 203.0.113.6 local 192.0.2.1 dstport 4789\nNote: id options means VXLAN Network Identifier (VNI).\nCreate multicast VXLAN link\nip link add name ${interface name} type vxlan \\\n   id \u003c0-16777215\u003e \\\n   dev ${source interface} \\\n   group ${multicast address} \\ \n   dstport ${VXLAN destination port}\nExample:\nip link add name vxlan0 type vxlan \\\n   id 42 dev eth0 group 239.0.0.1 dstport 4789\nAfter that you need to bring the link up and either bridge it with another interface or assign an address.\nRoute management\n\nFor IPv4 routes, you can use either a prefix length or a dotted decimal subnet mask. That is, both 192.0.2.0/24 and 192.0.2.0/255.255.255.0 are equally acceptable.\nNote: as per the section below, if you set up a static route, and it becomes unreachable because a link goes down, it will be removed and will never get back on its own. You may not have noticed this behaviour because in many cases additional software (e.g. NetworkManager or rp-pppoe) takes care of restoring the routes when links go up and down.\nIf you are going to use your Linux machine as a router, consider installing a routing protocol suite such as Quagga or BIRD. They keep track of interface status and restore routes when a link goes up after going down. Of course they also allow you to use dynamic routing protocols such as OSPF and BGP.\nConnected routes\nSome routes appear in the system without explicit configuration (against your will).\nOnce you assign an address to an interface, the system calculates its network address and creates a route to it (this is why the subnet mask is required). These routes are called connected routes.\nFor example, if you assign 203.0.113.25/24 to eth0, a connected route to 203.0.113.0/24 network will be created and the system will know that hosts from that network can be reached directly.\nWhen an interface goes down, connected routes associated with it are removed. This is used for inaccessible gateway detection so routes through gateways that went inaccessible are removed. Same mechanism prevents you from creating routes through inaccessible gateways.\nView all routes\nip route\n\nip route show\nYou can use -4 and -6 options to view only IPv4 or IPv6 routes. If no options given, IPv4 routes are displayed. To view IPv6 routes, use:\nip -6 route\nView routes to a network and all its subnets\nip route show to root ${address}/${mask}\nFor example, if you use 192.168.0.0/24 subnet in your network and it's broken into 192.168.0.0/25 and 192.168.0.128/25, you can see all those routes with:\nip route show to root 192.168.0.0/24\nNote: the word \"to\" in this and other show commands is optional.\nView routes to a network and all supernets\nip route show to match ${address}/${mask}\nIf you want to view routes to 192.168.0.0/24 and all larger subnets, use:\nip route show to match 192.168.0.0/24\nAs routers prefer more specific routes to less specific, this is often useful for debugging in situations when traffic to specific subnet is sent the wrong way because a route to it is missing but routes to larger subnets exist.\nView routes to exact subnet\nip route show to exact ${address}/${mask}\nIf you want to see the routes to 192.168.0.0/24, but not to, say 192.168.0.0/25 and 192.168.0.0/16, you can use:\nip route show to exact 192.168.0.0/24\nView only the route actually used by the kernel\nip route get ${address}/${mask}\nExample:\nip route get 192.168.0.0/24\nNote that in complex routing scenarios like multipath routing, the result may be \"correct but not complete\", as it always shows one route that will be used first. In most situations it's not a problem, but never forget to look at the corresponding \"show\" command output too.\nView route cache (pre 3.6 kernels only)\nip route show cached\nUntil the version 3.6, Linux used route caching. In older kernels, this command displays the contents of the route cache. It can be used with modifiers described above. In newer kernels it does nothing.\nAdd a route via gateway\nip route add ${address}/${mask} via ${next hop}\nExamples:\nip route add 192.0.2.128/25 via 192.0.2.1\n\nip route add 2001:db8:1::/48 via 2001:db8:1::1\nAdd a route via interface\nip route add ${address}/${mask} dev ${interface name}\nExample:\nip route add 192.0.2.0/25 dev ppp0\nInterface routes are commonly used with point-to-point interfaces like PPP tunnels where next hop address is not required.\nChange or replace a route\nYou may use \"change\" command to change parameters of existing routes. \"Replace\" command can be used to modify existing route or add new one if it doesn't exist. Examples:\nip route change 192.168.2.0/24 via 10.0.0.1\n\nip route replace 192.0.2.1/27 dev tun0\nDelete a route\nip route delete ${rest of the route statement}\nExamples:\nip route delete 10.0.1.0/25 via 10.0.0.1\n\nip route delete default dev ppp0\nDefault route\nThere is a shortcut to add default route.\nip route add default via ${address}/${mask}\n\nip route add default dev ${interface name}\nThese are equivalent to:\nip route add 0.0.0.0/0 via ${address}/${mask}\n\nip route add 0.0.0.0/0 dev ${interface name}\nWith IPv6 routes it also works and is equivalent to ::/0\nip -6 route add default via 2001:db8::1\nBlackhole routes\nip route add blackhole ${address}/${mask}\nExamples:\nip route add blackhole 192.0.2.1/32\nTraffic to destinations that match a blackhole route is silently discarded.\nBlackhole routes have dual purpose. First one is straightforward, to discard traffic sent to unwanted destinations, e.g. known malicious hosts.\nThe second one is less obvious and uses the \"longest match rule\" as per RFC1812. In some cases you may want the router to think it has a route to a larger subnet, while you are not using it as a whole, e.g. when advertising the whole subnet via dynamic routing protocols. Large subnets are commonly broken into smaller parts, so if your subnet is 192.0.2.0/24, and you have assigned 192.0.2.1/25 and 192.0.2.129/25 to your interfaces, your system creates connected routes to the /25's, but not the whole /24, and routing daemons may not want to advertise /24 because you have no route to that exact subnet. The solution is to setup a blackhole route to 192.0.2.0/24. Because routes to smaller subnets are preferred over larger subnets, it will not affect actual routing, but will convince routing daemons there's a route to the supernet.\nOther special routes\nip route add unreachable ${address}/${mask}\n\nip route add prohibit ${address}/${mask}\n\nip route add throw ${address}/${mask}\nThese routes make the system discard packets and reply with an ICMP error message to the sender.\nunreachable\nSends ICMP \"host unreachable\".\nprohibit\nSends ICMP \"administratively prohibited\".\nthrow\nSends \"net unreachable\".\nUnlike blackhole routes, these can't be recommended for stopping unwanted traffic (e.g. DDoS) because they generate a reply packet for every discarded packet and thus create even greater traffic flow. They can be good for implementing internal access policies, but consider firewall for this purpose first.\n\"Throw\" routes may be used for implementing policy-based routing, in non-default tables they stop current table lookup, but don't send ICMP error messages.\nRoutes with different metric\nip route add ${address}/${mask} via ${gateway} metric ${number}\nExamples:\nip route add 192.168.2.0/24 via 10.0.1.1 metric 5\n\nip route add 192.168.2.0 dev ppp0 metric 10\nIf there are several routes to the same network with different metric value, the one with the lowest metric will be preferred.\nImportant part of this concept is that when an interface goes down, routes that would be rendered useless by this event disappear from the routing table (see the Connected Routes section), and the system will fall back to higher metric routes.\nThis feature is commonly used to implement backup connections to important destinations.\nMultipath routing\nip route add ${addresss}/${mask} nexthop via ${gateway 1} weight ${number} nexthop via ${gateway 2} weight ${number}\nMultipath routes make the system balance packets across several links according to the weight (higher weight is preferred, so gateway/interface with weight of 2 will get roughly two times more traffic than another one with weight of 1). You can have as many gateways as you want and mix gateway and interface routes, like:\nip route add default nexthop via 192.168.1.1 weight 1 nexthop dev ppp0 weight 10\nWarning: the downside of this type of balancing is that packets are not guaranteed to be sent back through the same link they came in. This is called \"asymmetric routing\". For routers that simply forward packets and don't do any local traffic processing such as NAT, this is usually normal, and in some cases even unavoidable.\nIf your system does anything but forwarding packets between interfaces, this may cause problems with incoming connections and some measures should be taken to prevent it.\nPolicy-based routing\n\nPolicy-based routing (PBR) in Linux is designed the following way: first you create custom routing tables, then you create rules to tell the kernel it should use those tables instead of the default table for specific traffic.\nSome tables are predefined:\nlocal (table 255)\nContains control routes local and broadcast addresses.\nmain (table 254)\nContains all non-PBR routes. If you don't specify the table when adding a route, it goes here.\ndefault (table 253)\nReserved for post processing, normally unused.\nUser-defined tables are created automatically when you add the first route to them.\nCreate a policy route\nip route add ${route options} table ${table id or name}\nExamples:\nip route add 192.0.2.0/27 via 203.0.113.1 table 10\n\nip route add 0.0.0.0/0 via 192.168.0.1 table ISP2\n\nip route add 2001:db8::/48 dev eth1 table 100\nNotes: You can use any route options described in \"Route management\" section in policy routes too, the only difference is the \"table ${table id/name}\" part at the end.\nNumeric table identifiers and names can be used interchangeably. To create your own symbolic names, edit /etc/iproute2/rt_tables config file.\n\"delete\", \"change\", \"replace\", or any other route actions work with any table too.\n\"ip route ... table main\" or \"ip route ... table 254\" would have exact same effect to commands without a table part.\nView policy routes\nip route show table ${table id or name}\nExamples:\nip route show table 100\n\nip route show table test\nNote: in this case you need the \"show\" word, the shorthand like \"ip route table 120\" do not work because the command would be ambiguous.\nGeneral rule syntax\nip rule add ${options} \u003clookup ${table id or name}|blackhole|prohibit|unreachable\u003e\nTraffic that matches the ${options} (described below) will be routed according to the table with specified name/id instead of the \"main\"/254 table if \"lookup\" action is used.\n\"blackhole\", \"prohibit\", and \"unreachable\" actions that work the same way to route types with same names. In most of examples we will use \"lookup\" action as the most common.\nFor IPv6 rules, use \"ip -6\", the rest of the syntax is the same.\n\"table ${table id or name}\" can be used as alias to \"lookup ${table id or name}\".\nCreate a rule to match a source network\nip rule add from ${source network} ${action}\nExamples:\nip rule add from 192.0.2.0/24 lookup 10\n\nip -6 rule add from 2001:db8::/32 prohibit\nNotes: \"all\" can be used as shorthand to 0.0.0.0/0 or ::/0\nCreate a rule to match a destination network\nip rule add to ${destination network} ${action}\nExamples:\nip rule add to 192.0.2.0/24 blackhole\n\nip -6 rule add to 2001:db8::/32 lookup 100\nCreate a rule to match a ToS field value\nip rule add tos ${ToS value} ${action}\nExamples:\nip rule add tos 0x10 lookup 110\nCreate a rule to match a firewall mark value\nip rule add fwmark ${mark} ${action}\nExamples:\nip rule add fwmark 0x11 lookup 100\nNote: See iptables documentation to find out how to set the mark.\nCreate a rule to match inbound interface\nip rule add iif ${interface name} ${action}\nExamples:\nip rule add iif eth0 lookup 10\n\nip rule add iif lo lookup 20\nRule with \"iif lo\" (loopback) will match locally generated traffic.\nCreate a rule to match outbound interface\nip rule add oif ${interface name} ${action}\nExamples:\nip rule add oif eth0 lookup 10\nNote: this works only for locally generated traffic.\nSet rule priority\nip rule add ${options} ${action} priority ${value}\nExamples:\nip rule add from 192.0.2.0/25 lookup 10 priority 10\n\nip rule add from 192.0.2.0/24 lookup 20 priority 20\nNote: As rules are traversed from the lowest to the highest priority and processing stops at first match, you need to put more specific rules before less specific. The above example demonstrates rules for 192.0.2.0/24 and its subnet 192.0.2.0/25. If the priorities were reversed and the rule for /25 was placed after the rule for /24, it would never be reached.\nShow all rules\nip rule show\n\nip -6 rule show\nDelete a rule\nip rule del ${options} ${action}\nExamples:\nip rule del 192.0.2.0/24 lookup 10\nNotes: You can copy/paste from the output of \"ip rule show\"/\"ip -6 rule show\".\nDelete all rules\nip rule flush\n\nip -6 rule flush\nNotes: this operation is highly disruptive. Even if you have not configured any rules, \"from all lookup main\" rules are initialized by default. On an unconfigured machine you can see this:\n$ ip rule show\n0:    from all lookup local \n32766:    from all lookup main \n32767:    from all lookup default \n\n$ ip -6 rule show\n0:    from all lookup local \n32766:    from all lookup main\nThe \"from all lookup local\" rule is special and cannot be deleted. The \"from all lookup main\" is not, there may be valid reasons not to have it, e.g. if you want to route only traffic you created explicit rules for. As a side effect, if you do \"ip rule flush\", this rule will be deleted, which will make the system stop routing any traffic until you restore your rules.\nNetwork namespace management\n\nNetwork namespaces are isolated network stack instances within a single machine. They can be used for security domain separation, managing traffic flows between virtual machines and so on.\nEvery namespace is a complete copy of the networking stack with its own interfaces, addresses, routes etc. You can run processes inside a namespace and bridge namespaces to physical interfaces.\nCreate a namespace\nip netns add ${namespace name}\nExamples:\nip netns add foo\nList existing namespaces\nip netns list\nDelete a namespace\nip netns delete ${namespace name}\nExamples:\nip netns delete foo\nRun a process inside a namespace\nip netns exec ${namespace name} ${command}\nExamples:\nip netns exec foo /bin/sh\nNote: assigning a process to a non-default namespace requires root privileges.\nYou can run any processes inside a namespace, in particular you can run \"ip\" itself, commands like in this \"ip netns exec foo ip link list\" in this section are not a special syntax but simply executing another copy of \"ip\" in a namespace. You can run an interactive shell inside a namespace as well.\nList all processes assigned to a namespace\nip netns pids ${namespace name}\nThe output will be a list of PIDs.\nIdentify process' primary namespace\nip netns identify ${pid}\nExamples:\nip netns identify 9000\nAssign network interface to a namespace\nip link set dev ${interface name} netns ${namespace name}\n\nip link set dev ${interface name} netns ${pid}\nExamples:\nip link set dev eth0.100 netns foo\nNote: once you assign an interface to a namespace, it disappears from the default namespace and you will have to perform all operations with it via \"ip netns exec ${netspace name}\", as in \"ip netns exec ${netspace name} ip link set dev dummy0 down\".\nMoreover, when you move an interface to another namespace, it loses all existing configuration such as IP addresses configured on it and goes to DOWN state. You need to bring it back up and reconfigure.\nIf you specify a PID instead of a namespace name, the interface gets assigned to the primary namespace of the process with that PID. This way you can reassign an interface back to default namespace with e.g. \"ip netns exec ${namespace name} ip link set dev ${intf} netns 1\" (since init or another process with PID 1 is pretty much guaranteed to be in default namespace).\nConnect one namespace to another\nThis can be done by creating two veth links and assigning them two different namespaces. Suppose you want to connect namespace \"foo\" to the default namespace.\nCreate a pair of veth devices:\nip link add name veth1 type veth peer name veth2\nMove veth2 to namespace foo:\nip link set dev veth2 netns foo\nBring veth2 and add an address in \"foo\" namespace:\nip netns exec foo ip link set dev veth2 up\n\nip netns exec foo ip address add 10.1.1.1/24 dev veth2\nAdd an address to veth1, which stays in the default namespace:\nip address add 10.1.1.2/24 dev veth1\nNow you can ping 10.1.1.1 which if in foo namespace, and setup routes to subnets configured in other interfaces of that namespace.\nIf you want switching instead of routing, you can bridge those veth interfaces with other interfaces in corresponding namespaces. Same technique can be used to connect namespaces to physical networks.\nMonitor network namespace subsystem events\nip netns monitor\nDisplays events such as creation and deletion of namespaces when they occur.\nMulticast management\n\nMulticast is mostly handled by applications and routing daemons, so there is not much you can and should do manually here. Multicast-related ip commands are mostly useful for debug.\nView multicast groups\nip maddress show\n\nip maddress show ${interface name}\nExample:\n$ip maddress show dev lo\n1:    lo\n    inet  224.0.0.1\n    inet6 ff02::1\n    inet6 ff01::1\nAdd a link-layer multicast address\nYou cannot join an IP multicast group manually, but you can add a multicast MAC address (even though it's rarely needed).\nip maddress add ${MAC address} dev ${interface name}\nExample:\nip maddress add 01:00:5e:00:00:ab dev eth0\nView multicast routes\nMulticast routes cannot be added manually, so this command can only show multicast routes installed by a routing daemon. It supports the same modifiers to unicast route viewing commands (iif, table, from etc.).\nip mroute show\nNetwork event monitoring\n\nYou can monitor certain network events with iproute2, such as changes in network configuration, routing tables, and ARP/NDP tables.\nMonitor all events\nYou may either call the command without parameters or explicitly specify \"all\".\nip monitor\n\nip monitor all\nMonitor specific events\nip monitor ${event type}\nEvent type can be:\nlink\nLink state: interfaces going up and down, virtual interfaces getting created or destroyed etc.\naddress\nLink address changes.\nroute\nRouting table changes.\nmroute\nMulticast routing changes.\nneigh\nChanges in neighbor (ARP and NDP) tables.\nWhen there are distinct IPv4 and IPv6 subsystems, the usual \"-4\" and \"-6\" options allow you to display events only for specified protocol. As in:\nip -4 monitor route\n\nip -6 monitor neigh\n\nip -4 monitor address\nRead a log file produced by rtmon\niproute2 includes a program called \"rtmon\" that serves essentially the same purpose, but writes events to a binary log file instead of displaying them. \"ip monitor\" command allows you to read files created by the program\".\nip monitor ${event type} file ${path to the log file}\nrtmon syntax is similar to that of \"ip monitor\", except event type is limited to link, address, route, and all; and address family is specified in \"-family\" option.\nrtmon [-family \u003cinet|inet6\u003e] [\u003croute|link|address|all\u003e] file ${log file path}\nnetconf (sysctl configuration viewing)\n\nView sysctl configuration for all interfaces\nip netconf show\nView sysctl configuration for specific interface\nip netconf show dev ${interface}\nExamples:\nip netconf show dev eth0\nContributors:\nContent\nNicolas Dichtel\n\nNetconf section\n\nRussel Stuart\n\nTUN/TAP section\n\nPhil Huang\n\nUnicast VXLAN\n\nHaishan\n\ndstport option for VXLAN commands\n\nEmil Pederson\n\npromote_secondaries suggestion.\n\nNick B.\n\ntuntap device deletion command correction\nGrammar, style, typo fixes\nTrick van Staveren, powyginanachochla, Nathan Handler, Bhaskar Sarma Upadhyayula, Geert Stappers, Alex White-Robinson, Achilleas Pipinellis, fauxm, fgtham, eri.\nDesign\nelico, alex-eri.\nCopyright © Daniil Baturin  2013, 2015, 2017.  \n  \nLast modified: 2017 Nov 23.\n\n        \n    \n\n\n        \n    \n\n\n\n"},"titlepage.html":{"url":"titlepage.html","title":"Title Page","keywords":"","body":"\n            \n                \n            \n        \n    "}}